mapboxgl.accessToken =
  "pk.eyJ1IjoiaG9hbmd0aGFuaDIwMDYiLCJhIjoiY2xmYzBqYTB3MDFuNjN3dGE1cm11MzE4MyJ9.IB-Z56PqrChaX87Z508FZA"; // Thay b·∫±ng API Key c·ªßa b·∫°n
//   map.remove();

  const map = new mapboxgl.Map({
  container: "map", // ID c·ªßa th·∫ª div ch·ª©a b·∫£n ƒë·ªì
  style: "mapbox://styles/hoangthanh2006/cm6z81qfi004p01qv46ec1fwp", // Ki·ªÉu b·∫£n ƒë·ªì
  center: [106.702293, 10.78208],
  zoom: 12, // M·ª©c ƒë·ªô zoom
});

map.on("style.load", () => {
    console.log("üîÑ Style ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!");
});

// Th√™m ƒëi·ªÅu khi·ªÉn zoom
map.addControl(new mapboxgl.NavigationControl());

// Th√™m ƒëi·ªÅu khi·ªÉn ch·ªânh s·ª≠a ƒë·ªãa ƒëi·ªÉm
// map.addControl(
//     new MapboxGeocoder({
//         accessToken: mapboxgl.accessToken,
//         mapboxgl: mapboxgl,
//         marker: true,
//         language: 'vi',
//         countries: 'vn',
//         zoom: 12,
//         flyTo: true,
//         types: 'address,region,place,locality,neighborhood,poi',
//         flyTo: {
//             animate: true,
//             speed: 1.5
//         },
//     }),
// "top-left", // V·ªã tr√≠ hi·ªÉn th·ªã

// );



const geocoder = new MapboxGeocoder({
  accessToken: mapboxgl.accessToken,
  mapboxgl: mapboxgl,
});



// var rotateButton = document.getElementById('rotate');
let rotating = false;
const rotateButton = document.getElementById("rotate");
rotateButton.addEventListener("click", () => {
  if (!rotating) {
    rotating = setInterval(() => {
      map.easeTo({ bearing: map.getBearing() + 0.2 });
    }, 100);
  } else {
    clearInterval(rotating);
    rotating = false;
  }
});
// Rotate right to left
const rotateRightButton = document.getElementById("rotate-right");
rotateRightButton.addEventListener("click", () => {
  if (!rotating) {
    rotating = setInterval(() => {
      map.easeTo({ bearing: map.getBearing() - 0.2 });
    }, 100);
  } else {
    clearInterval(rotating);
    rotating = false;
  }
});

// Fly-in-left
const zoomInButton = document.getElementById("zoom-in-left");
let zoomInterval = null; // Bi·∫øn ƒë·ªÉ ki·ªÉm so√°t tr·∫°ng th√°i interval

zoomInButton.addEventListener("click", () => {
  if (!zoomInterval) {
    zoomInterval = setInterval(() => {
      const currentZoom = map.getZoom();
      const currentPitch = map.getPitch();
      const currentBearing = map.getBearing();

      if (currentZoom >= 18) {
        // D·ª´ng khi zoom ƒë·∫°t gi·ªõi h·∫°n mong mu·ªën
        clearInterval(zoomInterval);
        zoomInterval = null;
        return;
      }

      map.easeTo({
        zoom: currentZoom + 0.005, // TƒÉng zoom in
        pitch: Math.max(0, currentPitch - 0.01), // Gi·∫£m pitch ƒë·ªÉ nh√¨n ngang d·∫ßn
        bearing: currentBearing + 0.1, // Xoay nh·∫π camera
        duration: 50, // M∆∞·ª£t h∆°n
      });
    }, 100);
  } else {
    clearInterval(zoomInterval);
    zoomInterval = null;
  }
});

// Fly-in-right
const zoomInRightButton = document.getElementById("zoom-in-right");
let zoomInRightInterval = null; // Bi·∫øn ƒë·ªÉ ki·ªÉm so√°t tr·∫°ng th√°i interval

zoomInRightButton.addEventListener
  ("click", () => {
    if (!zoomInRightInterval) {
      zoomInRightInterval = setInterval(() => {
        const currentZoom = map.getZoom();
        const currentPitch = map.getPitch();
        const currentBearing = map.getBearing();

        if (currentZoom >= 18) {
          // D·ª´ng khi zoom ƒë·∫°t gi·ªõi h·∫°n mong mu·ªën
          clearInterval(zoomInRightInterval);
          zoomInRightInterval = null;
          return;
        }

        map.easeTo({
          zoom: currentZoom + 0.005, // TƒÉng zoom in
          pitch: Math.max(0, currentPitch - 0.01), // Gi·∫£m pitch ƒë·ªÉ nh√¨n ngang d·∫ßn
          bearing: currentBearing - 0.2, // Xoay nh·∫π camera
          duration: 50, // M∆∞·ª£t h∆°n
        });
      }, 100);
    } else {
      clearInterval(zoomInRightInterval);
      zoomInRightInterval = null;
    }
  });


// Fly-out
const zoomOutButton = document.getElementById("zoom-out");

let zoomOutInterval = null; // Bi·∫øn ƒë·ªÉ ki·ªÉm so√°t tr·∫°ng th√°i interval

zoomOutButton.addEventListener("click", () => {
  if (!zoomOutInterval) {
    zoomOutInterval = setInterval(() => {
      const currentZoom = map.getZoom();
      const currentPitch = map.getPitch();
      const currentBearing = map.getBearing();

      if (currentZoom <= 1) {
        // D·ª´ng khi zoom ƒë·∫°t gi·ªõi h·∫°n mong mu·ªën
        clearInterval(zoomOutInterval);
        zoomOutInterval = null;
        return;
      }

      map.easeTo({
        zoom: currentZoom - 0.01, // Gi·∫£m zoom out
        pitch: Math.min(60, currentPitch + 0.01), // TƒÉng pitch ƒë·ªÉ nh√¨n d·ªçc d·∫ßn
        bearing: currentBearing - 0.2, // Xoay nh·∫π camera
        duration: 50, // M∆∞·ª£t h∆°n
      });
    }, 100);
  } else {
    clearInterval(zoomOutInterval);
    zoomOutInterval = null;
  }
});

// // ‚úÖ Th√™m ƒëi·ªÅu h∆∞·ªõng
// const directions = new MapboxDirections({
//     accessToken: mapboxgl.accessToken,
//     unit: 'metric',
//     profile: 'mapbox/walking',
//     controls: {
//         profileSwitcher: true
//     },
//     language: 'vi',
//     showAlternatives: true,
//     alternatives: true,
//     placeholderOrigin: 'ƒêi·ªÉm xu·∫•t ph√°t',
//     placeholderDestination: 'ƒêi·ªÉm ƒë·∫øn',
//     geocoder: {
//         language: 'vi',
//         countries: 'vn'
//     },
//     flyTo: {
//         animate: true,
//         speed: 1.5
//     },
//     showSteps: true,
//     interactive: true,
//     instructions: true,
//     instructionsContainer: '#instructions',
//     steps: true,
//     bannerInstructions: true,
//     routeSummary: true,
//     summary: true,
//     summaryContainer: '#summary',
//     summaryOptions: {
//         maxHeight: 100,
//         maxWidth: 300
//     },
//     controls: {
//         inputs: true,
//         instructions: true,
//         profileSwitcher: true
//     },

//   });

// map.addControl(directions, 'top-left');
// L·∫•y v·ªã tr√≠ hi·ªán t·∫°i v√† ƒë·∫∑t l√†m ƒëi·ªÉm xu·∫•t ph√°t
// navigator.geolocation.getCurrentPosition((position) => {
//     const userLocation = `${position.coords.longitude},${position.coords.latitude}`;
//     directions.setOrigin(userLocation);
// });

// // Khi ng∆∞·ªùi d√πng click v√†o b·∫£n ƒë·ªì, ƒë·∫∑t ƒëi·ªÉm ƒë·∫øn
// map.on('click', (e) => {
//     const destination = `${e.lngLat.lng},${e.lngLat.lat}`;
//     directions.setDestination(destination);
// });

// // Button "Start" ƒë·ªÉ reset tuy·∫øn ƒë∆∞·ªùng
// const startButton = document.getElementById('start');
// startButton.addEventListener('click', () => {
//     navigator.geolocation.getCurrentPosition((position) => {
//         const userLocation = `${position.coords.longitude},${position.coords.latitude}`;
//         directions.setOrigin(userLocation);
//         directions.removeRoutes(); // X√≥a tuy·∫øn ƒë∆∞·ªùng c≈©
//     });
// });

// // Button "Stop" ƒë·ªÉ x√≥a ƒëi·ªÉm xu·∫•t ph√°t v√† ƒëi·ªÉm ƒë·∫øn
// const stopButton = document.getElementById('stop');
// stopButton.addEventListener('click', () => {
//     directions.setOrigin(null);
//     directions.setDestination(null);
// });

// Khai b√°o drawing ƒë·ªÉ v·∫Ω ƒë∆∞·ªùng
const drawing = new MapboxDraw({
  displayControlsDefault: false,
  controls: {
    polygon: true,
    line_string: true,
    point: true,
    trash: true,
  },
  defaultMode: "draw_polygon",
  styles: [
    {
      id: "draw-polygon",
      type: "fill",
      filter: ["all", ["==", "$type", "Polygon"]],
      paint: {
        "fill-color": "#fff",
        "fill-opacity": 0.5,
      },
      layout: {
        visibility: "visible",
      },
    },
    {
      id: "draw-line",
      type: "line",
      filter: ["all", ["==", "$type", "LineString"]],
      paint: {
        "line-color": "#ff0000",
        "line-width": 20,
        "fill-color": "#EFF739 ",
        "fill-opacity": 1,
        "line-opacity": 1,
        "line-blur": 0,

      },
      layout: {
        visibility: "visible",
        "line-cap": "round",
        "line-join": "round",
        // 'line-dasharray': [1, 1],
      },
    },
    // {
    //   id: "draw-point",
    //   type: "circle",
    //   filter: ["all", ["==", "$type", "Point"]],
    //   paint: {
    //     "circle-radius": 5,
    //     "circle-color": "#fff",
    //   },
    //   layout: {
    //     visibility: "visible",
    //   },
    // },
    // {
    //   id: "draw-trash",
    //   type: "symbol",
    //   filter: ["all", ["==", "$type", "Point"]],
    //   paint: {
    //     "icon-color": "#fff",
    //     "icon-size": 1.5,
    //   },
    //   layout: {
    //     visibility: "visible",
    //   },
    // },
    // {
    //   id: "draw-trash-hover",
    //   type: "symbol",
    //   filter: ["all", ["==", "$type", "Point"]],
    //   paint: {
    //     "icon-color": "#fff",
    //     "icon-size": 2,
    //   },
    //   layout: {
    //     visibility: "visible",
    //   },
    // },
    // {
    //   id: "draw-trash-active",
    //   type: "symbol",
    //   filter: ["all", ["==", "$type", "Point"]],
    //   paint: {
    //     "icon-color": "#fff",
    //     "icon-size": 2.5,
    //   },
    //   layout: {
    //     visibility: "visible",
    //   },
      
    // },
  ],
});

// Th√™m drawing v√†o b·∫£n ƒë·ªì
map.addControl(drawing, "top-right");

// ----------------- Th√™m ƒëi·ªÉm -----------------

const firebaseConfig = {
  apiKey: "AIzaSyCvZXkxayb40VJFy_9GyAYgZvtmX6ewtig",
  authDomain: "vm-map-runner.firebaseapp.com",
  databaseURL:
    "https://vm-map-runner-default-rtdb.asia-southeast1.firebasedatabase.app/",
  projectId: "vm-map-runner",
  storageBucket: "vm-map-runner.firebasestorage.app",
  messagingSenderId: "665369729555",
  appId: "1:665369729555:web:92ee8e587b0dace2a33de6",
  measurementId: "G-16LE1RRKTX",
};

firebase.initializeApp(firebaseConfig);

// K·∫øt n·ªëi Firebase
const database = firebase.database();



// üìå Bi·∫øn to√†n c·ª•c
let userId = localStorage.getItem("userId");
let userColor = localStorage.getItem("userColor");
let userMarkers = {};
let isUserInteracting = false;

// üü¢ H√†m t·∫°o/di chuy·ªÉn marker + hi·ªáu ·ª©ng nh·∫•p nh√°y
function addUserMarker(location, color, userKey, userName) {
    if (!location) return;

    // X√≥a marker c≈© n·∫øu t·ªìn t·∫°i
    if (userMarkers[userKey]) {
        userMarkers[userKey].remove();
    }

    // T·∫°o ph·∫ßn t·ª≠ HTML cho marker
    const markerElement = document.createElement("div");
    markerElement.className = "user-marker";
    markerElement.innerHTML = `<span class="marker-name">${userName}</span><span class="img-runner">
      <div class="top3-runer">
       <div class = "top1">
       <span>Top 1:</span>
        <span class="name">Nguy·ªÖn VƒÉn A</span>
       </div>
        <div class = "top2">
        <span>Top 2:</span>
        <span class="name">Nguy·ªÖn VƒÉn B</span>
       </div>
        <div class = "top3">
        <span>Top 3:</span>
        <span class="name">Nguy·ªÖn VƒÉn C</span>
       </div>
      </div>
    </span>`;

    // Thi·∫øt l·∫≠p CSS
    Object.assign(markerElement.style, {
        position: "relative",
        backgroundColor: color,
        width: "30px",
        height: "30px",
        borderRadius: "50%",
        border: "2px solid white",
        boxSizing: "border-box",
        animation: userKey === userId ? "blink-animation 1s infinite" : "blink-animation 1s infinite"
    });

    const markerName = markerElement.querySelector(".marker-name");
    Object.assign(markerName.style, {
        position: "absolute",
        top: "-40px",
        left: "50%",
        transform: "translateX(-50%)",
        backgroundColor: "rgba(0, 0, 0, 0.7)",
        color: "white",
        padding: "3px 6px",
        borderRadius: "5px",
        fontSize: "12px",
        whiteSpace: "nowrap"
    });

    // T·∫°o marker m·ªõi
    userMarkers[userKey] = new mapboxgl.Marker(markerElement)
        .setLngLat([location.lng, location.lat])
        .addTo(map);
}

// üü¢ H√†m x√≥a marker khi user r·ªùi kh·ªèi
function removeUserMarker(userKey) {
    if (userMarkers[userKey]) {
        userMarkers[userKey].remove();
        delete userMarkers[userKey];
    }
}

// üü¢ Load danh s√°ch online users
function loadOnlineUsers() {
    database.ref("users").on("value", (snapshot) => {
        snapshot.forEach((childSnapshot) => {
            const userData = childSnapshot.val();
            const userKey = childSnapshot.key;
            if (userData.location && userData.isOnline === true) {
                addUserMarker(userData.location, userData.color, userKey, userData.label);
            } else {
                removeUserMarker(userKey);
            }
        });
    });
}

// üü¢ Theo d√µi v·ªã tr√≠ user
function trackUserLocation() {
    if (!userId) return;

    let lastPosition = null;

    navigator.geolocation.watchPosition(
        (position) => {
            const newLocation = {
                lat: position.coords.latitude,
                lng: position.coords.longitude
            };

            // C·∫≠p nh·∫≠t Firebase
            database.ref(`users/${userId}`).update({ location: newLocation });

            // Di chuy·ªÉn marker m∆∞·ª£t m√†
            smoothMoveMarker(userId, newLocation);

            // N·∫øu kh√¥ng t∆∞∆°ng t√°c, di chuy·ªÉn v·ªÅ v·ªã tr√≠ user (tr·ª´ admin)
            if (!isUserInteracting && userId !== "admin") {
                map.easeTo({
                    center: [newLocation.lng, newLocation.lat],
                    zoom: 15,
                    duration: 1000
                });
            }
        },
        (error) => console.error("‚ö† L·ªói l·∫•y v·ªã tr√≠:", error),
        { enableHighAccuracy: true, maximumAge: 100, timeout: 500 }
    );
}

// üü¢ H√†m di chuy·ªÉn marker m∆∞·ª£t m√† v·ªõi Lerp
function smoothMoveMarker(userKey, newLocation) {
    if (!userMarkers[userKey]) return;

    const marker = userMarkers[userKey];
    const start = marker.getLngLat();
    const end = newLocation;
    let progress = 0;

    function animate() {
        if (progress < 1) {
            progress += 0.1; // ƒêi·ªÅu ch·ªânh t·ªëc ƒë·ªô m∆∞·ª£t (gi√° tr·ªã nh·ªè h∆°n = ch·∫≠m h∆°n)
            const interpolatedLng = start.lng + (end.lng - start.lng) * progress;
            const interpolatedLat = start.lat + (end.lat - start.lat) * progress;
            marker.setLngLat([interpolatedLng, interpolatedLat]);
            requestAnimationFrame(animate);
        } else {
            marker.setLngLat([end.lng, end.lat]);
        }
    }

    requestAnimationFrame(animate);
}


// üéØ X·ª≠ l√Ω t∆∞∆°ng t√°c b·∫£n ƒë·ªì
map.on("movestart", () => isUserInteracting = true);
map.on("moveend", () => setTimeout(() => isUserInteracting = false, 3000));

// üèÅ X·ª≠ l√Ω ƒëƒÉng nh·∫≠p
document.addEventListener("DOMContentLoaded", () => {
    const loginContainer = document.getElementById("login-container");
    const loginForm = document.getElementById("login-form");
    const usernameInput = document.getElementById("username");
    const passwordInput = document.getElementById("password");
    const errorMessage = document.getElementById("error-message");

    if (userId) {
        database.ref(`users/${userId}/isOnline`).once("value", (snapshot) => {
            if (!snapshot.val()) {
                localStorage.clear();
                userId = null;
                return;
            }
            loadOnlineUsers();
            trackUserLocation();
        });

        database.ref(`users/${userId}`).update({ isOnline: true });
        database.ref(`users/${userId}/isOnline`).onDisconnect().set(false);
        loginContainer.style.display = "none";
    }

    // üèÅ X·ª≠ l√Ω ƒëƒÉng nh·∫≠p
    loginForm.addEventListener("submit", (event) => {
        event.preventDefault();
        const username = usernameInput.value.trim();
        const password = passwordInput.value.trim();

        if (!username || !password) {
            errorMessage.innerText = "‚ùå Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!";
            return;
        }

        loginUser(username, password);
        checkAdmin(username);

    });

    // üü¢ H√†m ƒëƒÉng nh·∫≠p
    function loginUser(username, password) {
      database.ref(`users/${username}`).once("value", (snapshot) => {
          const userData = snapshot.val();
          const adminTools = document.querySelectorAll(".admin");
         
          if (!userData || userData.password !== password) {
              errorMessage.innerText = "‚ö† T√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!";
              return;
          }
  
          // ·∫®n admin tools n·∫øu kh√¥ng ph·∫£i admin
          if (username !== "admin") {
              adminTools.forEach((tool) => {
                  tool.style.display = "none";
              });
          } else {
              adminTools.forEach((tool) => {
                  tool.style.display = "block";
              });

             
          }
  
          console.log("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!");
          userId = username;
          userColor = userData.color;
  
          localStorage.setItem("userId", userId);
          localStorage.setItem("userColor", userColor);
  
          // Set isOnline = true
          database.ref(`users/${userId}/isOnline`).set(true);
  
          // üõ† X√≥a location c·ªßa user tr∆∞·ªõc ƒë√≥ tr∆∞·ªõc khi c·∫≠p nh·∫≠t v·ªã tr√≠ m·ªõi
          database.ref(`users/${userId}/location`).remove()
              .then(() => {
                  console.log("üóë X√≥a v·ªã tr√≠ c≈© th√†nh c√¥ng!");
              })
              .catch((error) => {
                  console.error("‚ö† L·ªói khi x√≥a v·ªã tr√≠ c≈©:", error);
              });
  
          navigator.geolocation.getCurrentPosition(
              (position) => {
                  const userLocation = {
                      lat: position.coords.latitude,
                      lng: position.coords.longitude
                  };
  
                  // C·∫≠p nh·∫≠t v·ªã tr√≠ m·ªõi
                  database.ref(`users/${userId}`).update({
                      location: userLocation,
                      isOnline: true
                  });
  
                  addUserMarker(userLocation, userColor, userId, userId);
                  loginContainer.style.display = "none";
  
                  map.flyTo({
                      center: [userLocation.lng, userLocation.lat],
                      zoom: 15,
                      speed: 0.5
                  });
  
                  trackUserLocation();
                  loadOnlineUsers();
              },
              (error) => {
                  console.error("‚ö† L·ªói l·∫•y v·ªã tr√≠:", error);
                  alert("‚ö† Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠ c·ªßa b·∫°n!");
              }
          );
          
        
        
      });
  }

  // H√†m ƒëƒÉng xu·∫•t
    const logoutButton = document.getElementById("logout");
    logoutButton.addEventListener("click", () => {
        database.ref(`users/${userId}`).update({ isOnline: false });
        localStorage.clear();
        window.location.reload();
    });
  
    // üèÅ Ng·∫Øt k·∫øt n·ªëi khi user t·∫Øt tr√¨nh duy·ªát
    window.addEventListener("beforeunload", () => {
        if (userId) {
            database.ref(`users/${userId}`).update({ isOnline: false });

        }
    localStorage.clear();
        // X√≥a b·ªô nh·ªõ cashe tr√™n tr√¨nh duy·ªát ƒëi·ªán tho·∫°i
        caches.keys().then(function (cacheNames) {
            cacheNames.forEach(function (cacheName) {
                caches.delete(cacheName);
            });
        });
    });

    // üî• CSS hi·ªáu ·ª©ng nh·∫•p nh√°y
    const style = document.createElement("style");
    style.innerHTML = `
        @keyframes blink-animation {
            0% { opacity: 1; width: 30px; height: 30px; }
            50% { opacity: 1; width: 35px; height: 35px; }
            100% { opacity: 1; width: 30px; height: 30px; }
        }
    `;
    document.head.appendChild(style);


// Ki·ªÉm tra user ph·∫£i l√† admin m·ªõi th·ª±c hi·ªán
function checkAdmin(username) {
  if (username === "admin") {
      const saveButton = document.getElementById("save");
      const clearButton = document.getElementById("clear");
      const loadSelect = document.getElementById("load-draw");
      const loadButton = document.getElementById("load");
      const deleteMapButton = document.getElementById("delete-map");
      let currentDrawing = null; // Bi·∫øn l∆∞u b·∫£n v·∫Ω hi·ªán t·∫°i tr√™n map

      // üõ† L∆∞u b·∫£n v·∫Ω v·ªõi t√™n t√πy ch·ªânh
      saveButton.addEventListener("click", () => {
          const name = prompt("Nh·∫≠p t√™n b·∫£n v·∫Ω:");
          if (!name) return;

          const data = drawing.getAll();
          const drawId = `draw_${Date.now()}`;
          // ƒê·∫£m b·∫£o t·∫•t c·∫£ features c√≥ properties
    data.features = data.features.map(feature => ({
      ...feature,
      properties: feature.properties || {}
  }));

          database.ref(`drawings/${drawId}`).set({ name, data })
              .then(() => {
                  console.log(`‚úÖ L∆∞u b·∫£n v·∫Ω "${name}" th√†nh c√¥ng!`);
                  loadDrawingsList(); // C·∫≠p nh·∫≠t danh s√°ch b·∫£n v·∫Ω
              })
              .catch((error) => console.error("‚ö† L·ªói khi l∆∞u:", error));
      });

      // üóë X√≥a b·∫£n v·∫Ω tr√™n b·∫£n ƒë·ªì nh∆∞ng kh√¥ng x√≥a trong Firebase
      deleteMapButton.addEventListener("click", () => {
          drawing.deleteAll();
          currentDrawing = null;
      });

      // üóë X√≥a t·∫•t c·∫£ b·∫£n v·∫Ω (C·∫¢ TRONG DATABASE)
      clearButton.addEventListener("click", () => {
          drawing.deleteAll();
          database.ref("drawings").remove()
              .then(() => {
                  console.log("üóë X√≥a t·∫•t c·∫£ b·∫£n v·∫Ω th√†nh c√¥ng!");
                  loadDrawingsList();
              })
              .catch((error) => console.error("‚ö† L·ªói khi x√≥a:", error));
      });

      // üì• Load danh s√°ch b·∫£n v·∫Ω t·ª´ Firebase
      function loadDrawingsList() {
          loadSelect.innerHTML = `<option value="">Ch·ªçn b·∫£n v·∫Ω...</option>`;
          database.ref("drawings").once("value", (snapshot) => {
              const data = snapshot.val();
              if (data) {
                  Object.entries(data).forEach(([drawId, { name }]) => {
                      const option = document.createElement("option");
                      option.value = drawId;
                      option.textContent = name || `B·∫£n v·∫Ω ${drawId.split("_")[1]}`;
                      loadSelect.appendChild(option);
                  });
              }
              // console.log("üìå D·ªØ li·ªáu b·∫£n v·∫Ω:", data);

          });

      }
     // üé® Khi ch·ªçn b·∫£n v·∫Ω, t·∫£i l√™n b·∫£n ƒë·ªì
loadButton.addEventListener("click", () => {
  const drawId = loadSelect.value;
  if (!drawId) return;

  database.ref(`drawings/${drawId}`).once("value", (snapshot) => {
      let data = snapshot.val()?.data;

      if (data) {
          // ‚úÖ ƒê·∫£m b·∫£o m·ªói feature c√≥ "properties"
          data.features = data.features.map(feature => ({
              ...feature,
              properties: feature.properties || {} // N·∫øu thi·∫øu th√¨ th√™m {}
          }));

          drawing.set(data); // V·∫Ω b·∫£n v·∫Ω l√™n map
          console.log("‚úÖ T·∫£i b·∫£n v·∫Ω th√†nh c√¥ng!", data);
          currentDrawing = data; // L∆∞u l·∫°i b·∫£n v·∫Ω tr√™n map
      } else {
          console.error("‚ö† L·ªói: Kh√¥ng c√≥ d·ªØ li·ªáu b·∫£n v·∫Ω ho·∫∑c b·ªã null!");
      }
  });
});


      // üîÑ Load danh s√°ch b·∫£n v·∫Ω khi trang m·ªü
      loadDrawingsList();
  } else {
      // ·∫®n c√¥ng c·ª• v·∫Ω n·∫øu kh√¥ng ph·∫£i admin
      document.querySelector(".draw-line-tool").style.display = "none";
  }
}


});
